{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from statsmodels.tsa.api import ExponentialSmoothing\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation\n",
    "from keras.layers.recurrent import LSTM\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Load"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to load corona virus deaths\n",
    "def load_data():\n",
    "    \n",
    "    import pandas as pd\n",
    "    url='https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'\n",
    "    # https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\n",
    "    corona_data = pd.read_csv(url, sep=',') # use sep=\",\" for coma separation. \n",
    "    corona_data.head()\n",
    "    return(corona_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# gdp growth data\n",
    "gdp_rate= pd.read_csv('GDP_growth_data/gdp_data.csv', skiprows=4)\n",
    "# pandemic data\n",
    "pandemic_data= pd.read_csv('pandemic.csv',encoding='ISO-8859-1')\n",
    "# covid-19 data\n",
    "corona_data= load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pre-processing\n",
    "corona_data = corona_data.drop(['Province/State', 'Lat','Long'], axis=1)\n",
    "global_deaths= pd.DataFrame(corona_data.sum(axis=0))\n",
    "global_deaths.columns=['deaths']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predicting covid-19 deaths based on probability distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total values to be paased for cumalative probability distribution3\n",
      "present cumalative probability distribution option.1\n",
      "present cumalative probability distribution option.2\n",
      "present cumalative probability distribution option.3\n",
      "   prob  deaths\n",
      "0   0.1  587870\n",
      "1   0.2  293935\n",
      "2   0.3  195956\n"
     ]
    }
   ],
   "source": [
    "total_deaths_till_today= global_deaths.tail(1) # this is utomtically take latest data\n",
    "\n",
    "## Assuming that we have death follows normal distribution curve.As peak is still not reached at we are at accelarating \n",
    "# pace to reach at peak, we can assume that we are at .3 cumalative probability distribution.\n",
    "number_of_distributions= int(input('total values to be paased for cumalative probability distribution'))\n",
    "\n",
    "list_prob= list()\n",
    "list_deaths=list()\n",
    "for i in range(number_of_distributions):\n",
    "    \n",
    "    cumalative_prob= float(input('present cumalative probability distribution option'))\n",
    "    list_prob.append(cumalative_prob)\n",
    "    deaths= int((total_deaths_till_today.values)/cumalative_prob)\n",
    "    list_deaths.append(deaths) \n",
    "data_d=pd.DataFrame({'prob': list_prob, 'deaths': list_deaths})\n",
    "print(data_d)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Expected number of deaths based on probability')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAEICAYAAAC9E5gJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAgAElEQVR4nO3deXxedZn38c+VfWuS7lsKBVoKZStQNkFAECwMTnkcRByVyjD28QEdnZfPKI7Ow4zb6DPzDCOjoigIuAEiS2FQrOyiUAItXSlNoSVJt7Rp0jT7cj1/nF/gELLcbZOcO8n3/Xrdr/uc39muc+7lOuf3O4u5OyIiMrZlJB2AiIgkT8lARESUDERERMlARERQMhAREZQMREQEJYNRzcw+aWZ/TIM4ZpuZm1lWQss/28w2mdl+M7s8hfHvMLNvDFEsgzJvM3vKzP52MGI6hBiGbDsNpUPZdgOtc/iOHdlzXDN7r5ltPLiIh4eSQYyZbTGz5vCBdr++l2A8if/gR4mvAd9z9yJ3f3C4FpouyViGT/iOvd5L+bPuPq+7P/zXvH94o+tfIntqae6D7v6HpIOQ3plZlrt3HOBkhwPrhiIeSS8H+f0QdGSQMjO7xcx+E+v/jpk9bpHzzazKzP7RzHaHrP+x2Li5ZvbvZvamme00sx+aWX5s+GIzW2Vm+8xss5ktMrNvAu8Fvhc/QjGzY8xsuZnVmtlGM7syNp+JZrYszGcFcFQ/69NddbMkxLXbzL4SG/6Ow+HudYz1bzGzfzCz1WbWaGa3mdlUM/utmTWY2R/MbHyPxf6NmW0zs+1m9r9j88owsxvCuu8xs3vNbEKPOK81szeBJ/pYn0+ZWUXYLsvMbEYo3wwcCTwctmNuL9OebGYvh7jvAfJ6DL8sfD51ZvYnMzsxNqw77gYzW29m/yOUHwv8EDgrLLcuNsvxZvbfYZoXzOyoMI2Z2U1mtit8hmvM7PjeP0EAjjKzFWHch7q3WZjXr81sh5nVm9kzZnZcbNilIdYGM6vu8Vn0t679bqce2yzDzL5qZlvD+txlZiVhWL/fvV7mdUf4zSwPy37azA6PDXczu97MNgGbQtl7zOzFsP4vmtl7BmPbBZMGiGVOL+vw1u/HzH4GHMbb38kvhu/DZ3tMs7r7+zQs3F2v8AK2AO/vY1gB8BrwSaI/6d1AWRh2PtAB/AeQC5wHNALzwvCbgGXABGAc8DDwr2HY6UA9cBFRcp4JHBOGPQX8bSyGQqASuIboqO7kEMf8MPxu4N4w3vFANfDHPtZnNuDAj4F84CSgFTg2DL8D+EZs/POBqh7b6nlgaoh5F/ByiCmP6E/7xh7L+lWI7QSgpntbA58L8yoL2+9HwK96THtXmDa/l3W5IGyHU8L0/wU8k+LnmgNsBf4eyAauANq71z2szy7gDCATWBLmlxuGfxiYET67j4TPfXoY9sme2z9s1z3hc88CfgHcHYZ9AHgJKAUMOLZ7Xr3E/VT4fI8P2+U3wM9jw/+G6LuWC/wnsCo2bDvw3tA9HjhloHUdaDv1Et/fABVEibgIuB/4WSrfvV7mdQfQAJwbYvlufLuGeS0n+n3lh/e9wCfCNv5o6J84CNsulVjm9PwN0fvv5/2x/iuBF2L9J4XvSc6w/f8N14JGwit8QPuButjrU7HhZwC14Ufx0Vj5+UTJoDBWdi/wT0Q/6kbgqNiws4A3QvePgJv6iOcp3pkMPgI822OcHwE3Ev142wmJJAz7FgMng7JY2QrgqtD91hc5to49v8wfi/X/Brgl1v9Z4MEey4rH9n+B20L3BuDC2LDpYV2yYtMe2c/ndhvwf2P9RWH62bFY+0oG5wLbAIuV/Sn2I74F+HqPaTYC5/Uxv1XA4tD9yZ7bP2zXn8T6LwVeDd0XEO1wnAlkDPBdfQr4dqx/PtAGZPYybmnYhiWh/03gfwLFPcbrc10H2k69LPNx4LpY/7xePtNev3u9zOsOQsKMfb6dwKzQ78AFseGfAFb0mMefgU8OwrZLJZaDSQZ5RAlrbuj/d+AH/X0HBvulaqJ3u9zdS2OvH3cPcPcXgNeJ/uDv7THdXndvjPVvJdpjnEx0VPFSOPSuA34XygFmAZtTjO1w4Izu+YR5fQyYFuaXRXTkEI9hIDti3U1EX+5U7Yx1N/fS33NePWObEboPBx6IrdMGoh/Y1D6m7WkGsXV19/1Ee1UzU1iHGUC1h19gLLZuhwNf6LHNZ3XHbmZXx6pV6oj2NicNsMxet7m7PwF8D/g+sMvMbjWz4n7m03N7ZhNVYWSa2bdD9dU+oj8eYnH9FVES2hqqOc5KYV0H2k49zegxfCvR9zP+mR7Id++tdQ2fby1vf3/eMbyXZXcvP/59ONhtl0osB8zdW4B7gI+bWQbR0czPDmWeB0rJ4ACY2fVEh4bbgC/2GDzezApj/YeF8XYT/TEeF0swJe7e/cWvpO+6fe/RXwk83SNZFbn7/yKqdukg+vHGYzhYjURJrNu0Q5hXt56xbQvdlcAlPdYrz92rY+P33BZx24j+yAAIn8NEoqqAgWwHZpqZ9YitWyXwzR6xFbj7r0Jd8Y+BzxBVQZQCa4l2FgaKuVfufrO7n0q0t3o08A/9jN5ze7YTfd/+GlgMvB8oIdoTpzsud3/R3RcDU4AHeXvHps91ZeDt1NM7PpMwbgfv3GE4EG+tq5kVEVUFbYsNj2/rnsvuXn78+3BQ2y7FWFLR23fjTqKduwuBJnf/8wHO85AoGaTIzI4GvgF8nOgw9ItmtqDHaP9iZjlm9l7gMuDX7t5F9Idxk5lNCfOaaWYfCNPcBlxjZheGRreZZnZMGLaTqM612yPA0Wb2CTPLDq/TzOxYd+8kqpf9ZzMrMLP5RHW+B2sVcKmZTTCzacDnD2Fe3f4pxHYcUbvHPaH8h8A3uxvizGyymS0+gPn+imgbLrCogfhbRPWvW1KY9s9Ef1J/F7bnh4jq87v9GPi0mZ1hkUIz+wszG0dU3+xEiRgzu4boyKDbTqDMzHJSWYnwWZ5hZtlEybgF6Opnko+b2XwzKyA6ffa+8D0YR1QHv4cooX8rtowcM/uYmZW4ezuwL7aM/tZ1oO3U06+AvzezI8If5reAe/zgz/S51MzOCdvy68Dz7t7X0eKjRL+TvzazLDP7CFFyfSQ2zgFvu4OMpS89f9uEP/8u4P8xzEcFoGTQm+4W/u7XAxZdLPVz4Dvu/oq7bwL+EfiZvX12yg6iOr9tRI2Cn3b3V8OwLxE1pj0fDj3/QFSHiruvIPpjvImoIflp3t6r+S5whZntNbOb3b0BuBi4KixnB/AdoqMViPZQi0L5HcBPD2E7/Ax4hegw+fe8/cd9KJ4m2g6PA//u7r8P5d8lamD/vZk1EDUmn5HqTD06FfifiNotthMdaV2V4rRtwIeI6vdridpl7o8NLwc+RVR9szfE/8kwbD3RD/fPRD/uE4DnYrN/guiU1h1mtjuFcIqJ/pD3ElVd7AH+rZ/xf0b0Oe8gqnP+u1B+V5i+GlhPtD3jPgFsCd/FTxPtjQ60rv1up17cHuJ7BniDKLF9tp/xB/JLoraxWuBUop2yXrn7HqKdsS8QbcMvApe5e/wzONhtd0Cx9ONfga+G6rj/HSu/i+h79PODmOchsXdWAcrBMLPzic5GKEs6FpHRxszuIGp8/WrSsQw1M7saWOru5wz3snVkICKSBkKV1XXArUksX8lARCRhoQ2xhqi68ZeJxKBqIhER0ZGBiIiM3BvVTZo0yWfPnp10GCIiI8ZLL720290n9zZsxCaD2bNnU15ennQYIiIjhpn1edW4qolERCS1ZGBmpWZ2n5m9amYbzOyscGXqcoueILXcwu2Kw5WLN1t0O+HVZnZKbD5LwvibzGxJrPxUi27XWxGmtd7iEBGRoZHqkcF3gd+5+zFEt1bdANwAPO7uc4muKL0hjHsJMDe8lhLdCRGL7hd+I9GVpacDN9rb97u/hejKx+7pFh3aaomIyIEYMBlY9ECKc4nuoYO7t7l7HdHNnO4Mo90JdD9bdjFwl0eeB0rNbDrRvdqXu3utu+8luv/4ojCs2N2fD3dEvCs2LxERGQapHBkcQXQxxE/NbKWZ/cSiu0JOdfftYZwdvH1r2pm88/awVaGsv/KqXsrfxcyWmlm5mZXX1NSkELqIiKQilWSQRfQEqVvc/WSiuyneEB8h7NEP+dVr7n6ruy9094WTJ/d6dpSIiByEVJJBFdFNol4I/fcRJYedoYqH8L4rDK/mnfcKLwtl/ZWX9VIuIiLDZMBk4O47gEozmxeKLiS6tesy3r5f/hLgodC9DLg6nFV0JlAfqpMeAy42s/Gh4fhi4LEwbJ+ZnRnOIro6Ni8REQn+sH4ntz6zma6uwa+ISfWis88CvwgPc3id6P77GcC9ZnYt0f2/rwzjPkr0SL0KokfZXQPg7rVm9nXgxTDe19y9NnRfR3Rv8Xzgt+ElIiIx96+sYk11PUvP7evhiAcvpWTg7quAhb0MurCXcR24vo/53E700Iue5eW88wlRIiLSw8o36zht9oQhmbeuQBYRGQF21Lewvb6FBbNKh2T+SgYiIiPAqsq9AJx8mJKBiMiYtbKyjpzMDObPKB6S+SsZiIiMACvfrOPYGcXkZmUOyfyVDERE0lxHZxdrquo5eYjaC0DJQEQk7b22cz/N7Z1D1l4ASgYiImlvZXfj8azxA4x58JQMRETS3Ko365hQmMOsCflDtgwlAxGRNLeyso4Fs0oZyud+KRmIiKSx+uZ2KnbtH9LGY1AyEBFJa6ur6gBYMISNx6BkICKS1la9WYcZnKQjAxGRsWtlZR1HTS6iOC97SJejZCAikqbcnVWh8XioKRmIiKSpytpmahvbhvRis25KBiIiaar7YjMdGYiIjGEr36wjPzuTeVPHDfmylAxERNLUyso6TigrIStz6P+qlQxERNJQW0cXG7bvG5YqIlAyEBFJS6/tbKCto4sTZpYMy/KUDERE0tCa6noATixTMhARGbNWV9VTnJfFYRMKhmV5SgYiImloTXUdJ5YN7Z1K45QMRETSTEt7Jxt3NHDCMFURgZKBiEjaeXVHA+2dzonD1HgMKSYDM9tiZmvMbJWZlYeyCWa23Mw2hffxodzM7GYzqzCz1WZ2Smw+S8L4m8xsSaz81DD/ijDt8BwXiYikoTXhttUnDtNppXBgRwbvc/cF7r4w9N8APO7uc4HHQz/AJcDc8FoK3AJR8gBuBM4ATgdu7E4gYZxPxaZbdNBrJCIywq2uqmdiYQ4zSvKGbZmHUk20GLgzdN8JXB4rv8sjzwOlZjYd+ACw3N1r3X0vsBxYFIYVu/vz7u7AXbF5iYiMOWuq6zmhrGTYGo8h9WTgwO/N7CUzWxrKprr79tC9A5gaumcClbFpq0JZf+VVvZS/i5ktNbNyMyuvqalJMXQRkZGjua2T13Y2DGt7AUBWiuOd4+7VZjYFWG5mr8YHurubmQ9+eO/k7rcCtwIsXLhwyJcnIjLc1m+vp8vhhLLhay+AFI8M3L06vO8CHiCq898ZqngI77vC6NXArNjkZaGsv/KyXspFRMac1VXDe+VxtwGTgZkVmtm47m7gYmAtsAzoPiNoCfBQ6F4GXB3OKjoTqA/VSY8BF5vZ+NBwfDHwWBi2z8zODGcRXR2bl4jImLKmqp4p43KZWjx8jceQWjXRVOCB0JCRBfzS3X9nZi8C95rZtcBW4Mow/qPApUAF0ARcA+DutWb2deDFMN7X3L02dF8H3AHkA78NLxGRMWd1df2wHxVACsnA3V8HTuqlfA9wYS/lDlzfx7xuB27vpbwcOD6FeEVERq39rR1srtnPB0+cMezL1hXIIiJpYl11Pe7D314ASgYiImmju/F4OO9J1E3JQEQkTayurmdmaT6TinKHfdlKBiIiaWJNVd2wPdmsJyUDEZE0UNvYxpY9TYlUEYGSgYhIWvjT5t0AnHXUxESWr2QgIpIGnqvYzbi8rGG/J1E3JQMRkYS5O89u2s1ZR04kKzOZv2UlAxGRhL1Z20TV3mbOmTspsRiUDEREEvbspqi94Jw5SgYiImPWcxW7mVGSxxGTChOLQclARCRBnV3Onzbv4ew5k4b1yWY9KRmIiCRobXU99c3tibYXgJKBiEii/lgRtRecnWB7ASgZiIgk6o+bdnPs9OJE7kcUp2QgIpKQ5rZOXtq6l3PmJHPVcZySgYhIQlZsqaWts4tz5k5OOhQlAxGRpDxXsZuczAxOmz0+6VCUDEREkvLspt2ccngpBTmpPI5+aCkZiIgkYPf+VjZs38d706CKCJQMREQS8VyanFLaTclARCQBT79WQ2lBdmJPNutJyUBEZJh137L6nDmTyMxI7hYUcUoGIiLDbMP2BmoaWjn36PRoL4ADSAZmlmlmK83skdB/hJm9YGYVZnaPmeWE8tzQXxGGz47N48uhfKOZfSBWviiUVZjZDYO3eiIi6eeZTTUAnJsmjcdwYEcGnwM2xPq/A9zk7nOAvcC1ofxaYG8ovymMh5nNB64CjgMWAT8ICSYT+D5wCTAf+GgYV0RkVHrmtRrmTR3HtJK8pEN5S0rJwMzKgL8AfhL6DbgAuC+McidweeheHPoJwy8M4y8G7nb3Vnd/A6gATg+vCnd/3d3bgLvDuCIio05TWwflW/Zy3rz0OSqA1I8M/hP4ItAV+icCde7eEfqrgJmheyZQCRCG14fx3yrvMU1f5e9iZkvNrNzMymtqalIMXUQkfTz/+h7aOrvSqooIUkgGZnYZsMvdXxqGePrl7re6+0J3Xzh5cnptSBGRVDy9sYa87AwWpsEtKOJSuQb6bOAvzexSIA8oBr4LlJpZVtj7LwOqw/jVwCygysyygBJgT6y8W3yavspFREaVZzbt5swjJ5KXnZl0KO8w4JGBu3/Z3cvcfTZRA/AT7v4x4EngijDaEuCh0L0s9BOGP+HuHsqvCmcbHQHMBVYALwJzw9lJOWEZywZl7URE0khlbRNv7G5MuyoiSO3IoC9fAu42s28AK4HbQvltwM/MrAKoJfpzx93Xmdm9wHqgA7je3TsBzOwzwGNAJnC7u687hLhERNLS06+FU0rT6PqCbgeUDNz9KeCp0P060ZlAPcdpAT7cx/TfBL7ZS/mjwKMHEouIyEjzzGs1zCzN56jJhUmH8i66AllEZBi0d3bxp817OPfoSURn26cXJQMRkWGw8s069rd2pGV7ASgZiIgMiyc37iIzw3hPmtyyuiclAxGRIebuPLJ6G2fPmURJfnbS4fRKyUBEZIi9UlVPZW0zHzxxetKh9EnJQERkiD38yjZyMjO4+LhpSYfSJyUDEZEh1NUVVRGdN29y2lYRgZKBiMiQenFLLTv3tfLBk2YkHUq/lAxERIbQw6u3kZ+dyfuPnZJ0KP1SMhARGSIdnV08umYHFx47hYKcQ7n7z9BTMhARGSJ/2ryH2sa2tK8iAiUDEZEh8/Ar2xiXm8V5aXhjup6UDEREhkBrRye/W7eDi4+blnbPLuiNkoGIyBB45rXdNLR08MGT0vdCszglAxGRIbDslW2ML8jm7DS9F1FPSgYiIoOsvqmdx9bt4LITZ5CdOTL+ZkdGlCIiI8iyV6pp6+jiI6fNGnjkNKFkICIyyO4tr+LY6cUcN6M46VBSpmQgIjKI1m/bx5rqeq5cWJaWTzTri5KBiMggure8kpzMDC5fMDPpUA6IkoGIyCBp7ejkwVXVXHTcVMYX5iQdzgFRMhARGSR/WL+LuqZ2rlw4chqOuykZiIgMknvKK5lRksc5I+TagjglAxGRQbCtrplnN9VwxallZGaMnIbjbkoGIiKD4DcvVeEOV5w68qqIIIVkYGZ5ZrbCzF4xs3Vm9i+h/Agze8HMKszsHjPLCeW5ob8iDJ8dm9eXQ/lGM/tArHxRKKswsxsGfzVFRIZOV5fz65eqeM9REzlsYkHS4RyUVI4MWoEL3P0kYAGwyMzOBL4D3OTuc4C9wLVh/GuBvaH8pjAeZjYfuAo4DlgE/MDMMs0sE/g+cAkwH/hoGFdEZEQo37qXN2ubuOLUsqRDOWgDJgOP7A+92eHlwAXAfaH8TuDy0L049BOGX2jRlReLgbvdvdXd3wAqgNPDq8LdX3f3NuDuMK6IyIjwwMoq8rMz+cBx05IO5aCl1GYQ9uBXAbuA5cBmoM7dO8IoVUD3FRYzgUqAMLwemBgv7zFNX+W9xbHUzMrNrLympiaV0EVEhlRLeyePrN7OouOnUZib3o+27E9KycDdO919AVBGtCd/zJBG1Xcct7r7QndfOHly+j85SERGvyde3UVDSwf/4+SRdcVxTwd0NpG71wFPAmcBpWbWnQbLgOrQXQ3MAgjDS4A98fIe0/RVLiKS9u5/uZop43JHzHML+pLK2USTzaw0dOcDFwEbiJLCFWG0JcBDoXtZ6CcMf8LdPZRfFc42OgKYC6wAXgTmhrOTcogamZcNxsqJiAyl2sY2ntq4i8ULZozIawviUqngmg7cGc76yQDudfdHzGw9cLeZfQNYCdwWxr8N+JmZVQC1RH/uuPs6M7sXWA90ANe7eyeAmX0GeAzIBG5393WDtoYiIkPkkdXb6OhyPnTKyD2LqJtFO+0jz8KFC728vDzpMERkDLv8+8/R0t7J7z5/btKhpMTMXnL3hb0N0xXIIiIHYXPNflZV1vGhU0Z2w3E3JQMRkYPw4MpqMgwWj7DnFvRFyUBE5AB1dTkPrKzm7DmTmFqcl3Q4g0LJQETkAK3YUkvV3uYRf21BnJKBiMgBuvfFSsblZnHJ8dOTDmXQKBmIiByA+uZ2/nvNdv5ywQzyczKTDmfQKBmIiByAZa9so7Wji6tOOyzpUAaVkoGIyAG458U3OXZ6McfPLE46lEGlZCAikqK11fWsrd7HVafNIroz/+ihZCAikqJ7yyvJycrg8lFybUGckoGISApa2jt5YGU1lx4/jZKC7KTDGXRKBiIiKfjt2u00tHRw5Wkj84H3A1EyEBFJwT0vVnL4xALOPGJi0qEMCSUDEZEBvLG7kedfr+XKhbPIGOHPLeiLkoGIyAB+/vxWMjOMK04d+c8t6IuSgYhIP+qb27l7xZtcduL0UXNTut4oGYiI9OPuFW/S2NbJp957ZNKhDCklAxGRPrR3dnHHn7Zw1pETOX5mSdLhDCklAxGRPvz36u1sr29h6bmj+6gAlAxERHrl7tz6zOvMmVLEeUdPTjqcIadkICLSiz9v3sP67fv423OOGLWnk8YpGYiI9OLHz77OpKIcLh9FTzPrj5KBiEgPm3Y28OTGGq4+azZ52aPnATb9UTIQEenh1mdeJy87g4+feXjSoQwbJQMRkZjK2iYeWFnNVacdxoTCnKTDGTYDJgMzm2VmT5rZejNbZ2afC+UTzGy5mW0K7+NDuZnZzWZWYWarzeyU2LyWhPE3mdmSWPmpZrYmTHOzjbanRojIiPGDpzaTYcanzzsq6VCGVSpHBh3AF9x9PnAmcL2ZzQduAB5397nA46Ef4BJgbngtBW6BKHkANwJnAKcDN3YnkDDOp2LTLTr0VRMROTDVdc3c91IlHzltFtNKRu+tJ3ozYDJw9+3u/nLobgA2ADOBxcCdYbQ7gctD92LgLo88D5Sa2XTgA8Byd691973AcmBRGFbs7s+7uwN3xeYlIjJsfvT0ZgA+ff7YOiqAA2wzMLPZwMnAC8BUd98eBu0ApobumUBlbLKqUNZfeVUv5b0tf6mZlZtZeU1NzYGELiLSrx31Ldy9opIrTi1jZml+0uEMu5STgZkVAb8BPu/u++LDwh69D3Js7+Lut7r7QndfOHny6L8iUESGz4+e2UynO9edPyfpUBKRUjIws2yiRPALd78/FO8MVTyE912hvBqIPxeuLJT1V17WS7mIyLDY1dDCL194kw+dPJNZEwqSDicRqZxNZMBtwAZ3/4/YoGVA9xlBS4CHYuVXh7OKzgTqQ3XSY8DFZjY+NBxfDDwWhu0zszPDsq6OzUtEZMj9+JnXae/s4vr3jc2jAoCsFMY5G/gEsMbMVoWyfwS+DdxrZtcCW4Erw7BHgUuBCqAJuAbA3WvN7OvAi2G8r7l7bei+DrgDyAd+G14iIkOusraJO/+8lcsXzGT2pMKkw0nMgMnA3f8I9HXe/4W9jO/A9X3M63bg9l7Ky4HjB4pFRGSwff2R9WRlGP+waF7SoSRKVyCLyJj11MZd/H79Tj57wVyml4y9M4jilAxEZExq6+jiaw+v54hJhfzNObOTDidxSgYiMibd/twbvL67kRs/OJ/crLFxZ9L+KBmIyJizo76Fmx/fxEXzp3L+vClJh5MWlAxEZMz51qMb6Ohy/s9l85MOJW0oGYjImPLUxl0se2Ubnz7vqDF7gVlvlAxEZMyob2rnS79ZzdFTi7j+fWPvZnT9SeWiMxGRUeFfHl7Hnv1t/OTq09Ro3IOODERkTPjd2h3cv7Kaz1wwhxPKSpIOJ+0oGYjIqLdnfytfeWANx88sHtP3H+qPqolEZFRzd7764FoaWjr45YcXkJ2pfeDeaKuIyKh2/8vV/HbtDv7+oqOZN21c0uGkLSUDERm1KnY18NUH13LGERNYeu6RSYeT1pQMRGRUam7r5LpfvExBTiY3f/RkMjP6uvmygNoMRGSU+udl69i0az93XnM6U4vzkg4n7enIQERGnftfruKe8ko+8745nHu0npeeCiUDERlVKnbt56sPruX0IybwuQvnJh3OiKFkICKjRnNbJ9f/4mXysjP5r4+eTJZOI02Z2gxEZNT452XreG1Xg9oJDoLSpoiMCt3tBNefr3aCg6FkICIjXsWuBr7yQNRO8Pn3q53gYCgZiMiIFr+eQO0EB09tBiIyYrk7X3lwja4nGARKoSIyYt38eAX3v1zN5y6cq3aCQzRgMjCz281sl5mtjZVNMLPlZrYpvI8P5WZmN5tZhZmtNrNTYtMsCeNvMrMlsfJTzWxNmOZmM9M14yIyoF+XV3LTH17jr04p0/UEgyCVI4M7gEU9ym4AHnf3ucDjoR/gEmBueC0FboEoeQA3AmcApwM3dieQMM6nYtP1XJaIyDs881oNX75/DefMmcS/fugEtA956AZMBu7+DFDbo3gxcGfovhO4PFZ+l0eeB0rNbBGqgrwAAA3gSURBVDrwAWC5u9e6+15gObAoDCt29+fd3YG7YvMSEXmX9dv2cd0vXmbOlCJ+8PFTyMlSbfdgONitONXdt4fuHcDU0D0TqIyNVxXK+iuv6qW8V2a21MzKzay8pqbmIEMXkZFq444GPvnTFRTlZvHTa06jOC876ZBGjUNOqWGP3gchllSWdau7L3T3hZMnq7FIZCxZ8UYtH/7hnwC469rTmV6Sn3BEo8vBJoOdoYqH8L4rlFcDs2LjlYWy/srLeikXEXnLY+t28PHbXmDSuFzuv+49HD1VTywbbAebDJYB3WcELQEeipVfHc4qOhOoD9VJjwEXm9n40HB8MfBYGLbPzM4MZxFdHZuXiAi/eGEr/+vnLzF/ejH3ffo9lI0vSDqkUWnAi87M7FfA+cAkM6siOivo28C9ZnYtsBW4Moz+KHApUAE0AdcAuHutmX0deDGM9zV3726Uvo7ojKV84LfhJSJjXF1TG197eD33r6zm/HmT+cHHTqEgR9fJDhWLqvxHnoULF3p5eXnSYYjIEHhs3Q6++uBaahvbuO78o/i7C+eSrdtMHDIze8ndF/Y2TGlWRNLGnv2t/PPD63n4lW3Mn17MTz95GsfPLEk6rDFByUBEEtfV5dxbXsm//vZVmto6+MJFR/Pp84/S0cAwUjIQkURt3NHAVx5YQ/nWvZx+xAS+efnxzNXZQsNOyUBEElHf1M73ntzET5/bwri8LP7tihO54tQy3VoiIUoGIjKsWto7uevPW/jeExU0tHZw5amz+NIlxzChMCfp0MY0JQMRGRYdnV08tGob/7H8Narrmjl/3mS+tOgYjp1enHRogpKBiAyxjs4uHly1je8/WcEbuxs5fmYx/3bFibxnzqSkQ5MYJQMRGRINLe389+rt/OCpzbxZ28RxM4r50SdO5aJjp5KRoXaBdKNkICKDpr65ncc37OTRNdt55rXdtHV2ccLMEn589ULef+wUNQ6nMSUDETlku/e3cvPjm7h7RSVtnV1ML8nj42cezl+cOI1TDhuvJDACKBmIyEFrbO3gJ8++wa3PbKalo4srF5bx4YWzWFBWqqqgEUbJQEQG1NnlrK2uZ8ueRnbvb6O2sZXaxjb+sGEXNQ2tLDpuGv+waB5HTS5KOlQ5SEoGItKrXftaeHbTbp5+rYZnN9Wwt6n9rWGZGcaEwhzmTR3HDz9+CqcePiHBSGUwKBmICPta2tm0cz+vVNaxsrKOlW/upWpvMwCTinJ43zFTOO/oyRw3o4RJRTkU52WrGmiUUTIQGUMaWtpZv20fa7ftY+OOfbyxu5E3dkdVP91mlOSx4LBSrj7rcN5z1CTmTy/WH/8YoGQgMgo0t3Wye39reLWxZ38rexrb2NvYRm1T9P7G7ka27Gl6a5pJRTkcOamIC4+ZyhGTCzlyUiEnlpUyrSQvwTWRpCgZiKQJd6ehtYP6pnbqm9vZ19JOQ0sHDS0d1De3U9fURm1jG3VN7extamNv09tlrR1dvc6zICeT8QU5TCjM4ZhpxVxxahnHzSjhuBnFTCnWn768TclA5CC4O60dXexv7aC5rZPWjk5a2rtoae+kub2TxtZOmts7aGztpKmt460/9f2tHexv6aCpvZPmto4wXif1zVEC6Ozq+8mDGQalBTmUFmQzviCHmaV5HDejmPEF2ZQW5DC5KJdJ43KYVJTLpKJcJhTmkJedOYxbRUYyJQMZs9o7u2jt6KKzy3F3ujx67m7V3mYq9zZRtbeZHfUt7At76fuaO9jX0s7+1g6a2jr7/ePuyQyKcrMYl5tFYW4WBblZFGRnMqM0m/ycLErysyjNj/7oS/Kj17i8bMblZVGcl01xfpYabWVIKRnIqOHu7G/tYFdDKzv3tbC3sZ3O8Ixvd6ej09m6p5FNu/azadd+tuxupKOfP/SsDGNqcR6lBdkU52Uze1IB4/KyKcrNoig3i4LcTApzssjPziQ3O4O87EzysjPJz86kMAwryM2kICeLwpxMXYUraU3JQNKeu9PY1snOfS1sr2the30z2+tb2NXQwu6GNmpCw2lNQytNbZ39zivDYPbEQuZMKeLi+VMZX5CDWXTefIYZhblZzBqfz6wJBUwtziNTe+IyRigZSCLcnbqmdrbVN7O9roWdDS3s2R81hu5p7L7Ctf2ts2HaemkgLS3IZnJRLpPH5XJSWSmTx+UytTiXKePymFKcy8TCXKJH6EZ/6JkZxvSSPNWji/RCyUCGTFeXs7W2iTXV9Wzd3Uh1XfNbr211zbS0v/sPflxeFhMLo7NfZpbmc8LMYsYX5jC+IIdpxXlMK8ljRkk+U4pz9acuMoiUDCQl3VU18fPXu9/3tbTT5eAOjtPW0cWr2xtYW11PQ2vHW/OYVBT9wc+bOo73zZvCjNJ8ZpTkMb00n2nFeUwozCEnKyPBtRQZu5QMxqCuLqehpYO65rZw/np0WmNdczv1TW1R9UzT23/2tY1t7N7f2ue57FF9OxgGFjW8zp1SxOKTZ3DCzBKOn1nCUZOLtCcvksbSJhmY2SLgu0Am8BN3/3bCIaWdzi6nsa2Dxtbotb+1k/3h3PWoP3p1X6y0v6WDhnAqZPc57vua22lo7cD7OSuyMCeTCUU5TCjMZVJRDkdPHcekohwmFuUwsTA6fz3+KtCZMiIjXlokAzPLBL4PXARUAS+a2TJ3X59sZP3r6nLau7ro6IwuQGpu76S5rZOW9s537UW7R9UnrR1dtHZEw7vHa2nvpLW9i5Zw4VJzezSPhpYOasOe+Z79rexr6egjknfKycqgOC+LcXnZFOZmMi43m8MmFFCUF53nXlKQ89a57CX52ZQWZFOan01JOMc9N0t78CJjTVokA+B0oMLdXwcws7uBxcCgJ4PL/uvZdzVcujvu0OWOE+2Bd3U5ne50dr396vIwzJ2OUDaYMjOM/OxM8rIzyM3KZFxeFhMKczhuRjETC3MoLchhXF500VJhbhZFuZkU5b79h1+Ym0lRXpb+zEXkgKVLMpgJVMb6q4Azeo5kZkuBpQCHHXbYQS1ozuQi2jvf/SeekWEY0XnoGWZkZBhZGdF7ptlb56FnZkTDszKNrIwMcrIyyMowcrMyyM+JLjoqyMkiO9PeUXViQG5WBrnZmeRmRdPlhe7u9+xMNZ6KSDLSJRmkxN1vBW4FWLhw4UHtlv/nVScPakwiIqNBuuyKVgOzYv1loUxERIZBuiSDF4G5ZnaEmeUAVwHLEo5JRGTMSItqInfvMLPPAI8RnVp6u7uvSzgsEZExIy2SAYC7Pwo8mnQcIiJjUbpUE4mISIKUDERERMlARESUDEREBDDv745laczMaoCtBzn5JGD3IIYzVBTn4BspsSrOwTVS4oShjfVwd5/c24ARmwwOhZmVu/vCpOMYiOIcfCMlVsU5uEZKnJBcrKomEhERJQMRERm7yeDWpANIkeIcfCMlVsU5uEZKnJBQrGOyzUBERN5prB4ZiIhIjJKBiIiMrWRgZovMbKOZVZjZDUnHE2dmt5vZLjNbGyubYGbLzWxTeB+fZIwhpllm9qSZrTezdWb2uXSM1czyzGyFmb0S4vyXUH6Emb0QvgP3hFumJ87MMs1spZk9EvrTNc4tZrbGzFaZWXkoS6vPPsRUamb3mdmrZrbBzM5KtzjNbF7Yjt2vfWb2+aTiHDPJwMwyge8DlwDzgY+a2fxko3qHO4BFPcpuAB5397nA46E/aR3AF9x9PnAmcH3YjukWaytwgbufBCwAFpnZmcB3gJvcfQ6wF7g2wRjjPgdsiPWna5wA73P3BbFz4dPtswf4LvA7dz8GOIlo26ZVnO6+MWzHBcCpQBPwAEnFGT0MfvS/gLOAx2L9Xwa+nHRcPWKcDayN9W8Epofu6cDGpGPsJeaHgIvSOVagAHiZ6Lnau4Gs3r4TCcZXRvSjvwB4hOiR2WkXZ4hlCzCpR1laffZACfAG4QSZdI2zR2wXA88lGeeYOTIAZgKVsf6qUJbOprr79tC9A5iaZDA9mdls4GTgBdIw1lD1sgrYBSwHNgN17t4RRkmX78B/Al8EukL/RNIzTgAHfm9mL5nZ0lCWbp/9EUAN8NNQ9fYTMysk/eKMuwr4VehOJM6xlAxGNI92E9LmPGAzKwJ+A3ze3ffFh6VLrO7e6dEheBlwOnBMwiG9i5ldBuxy95eSjiVF57j7KUTVrdeb2bnxgWny2WcBpwC3uPvJQCM9qlrSJE4AQnvQXwK/7jlsOOMcS8mgGpgV6y8LZelsp5lNBwjvuxKOBwAzyyZKBL9w9/tDcVrGCuDudcCTRNUtpWbW/YS/dPgOnA38pZltAe4mqir6LukXJwDuXh3edxHVb59O+n32VUCVu78Q+u8jSg7pFme3S4CX3X1n6E8kzrGUDF4E5oazNHKIDsuWJRzTQJYBS0L3EqL6+USZmQG3ARvc/T9ig9IqVjObbGaloTufqF1jA1FSuCKMlnic7v5ldy9z99lE38kn3P1jpFmcAGZWaGbjuruJ6rnXkmafvbvvACrNbF4ouhBYT5rFGfNR3q4igqTiTLrhZJgbaS4FXiOqO/5K0vH0iO1XwHagnWjP5lqiuuPHgU3AH4AJaRDnOUSHrauBVeF1abrFCpwIrAxxrgX+Tyg/ElgBVBAdlucmvU1jMZ8PPJKucYaYXgmvdd2/oXT77ENMC4Dy8Pk/CIxP0zgLgT1ASawskTh1OwoRERlT1UQiItIHJQMREVEyEBERJQMREUHJQEREUDIQERGUDEREBPj/Bf5On6Kh3BsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_dealts= global_deaths.values.ravel()\n",
    "plot_dealts1= plot_dealts[1:len(plot_dealts)]\n",
    "plot_dealts1=list(plot_dealts1)\n",
    "p= np.arange(0,len(plot_dealts1))\n",
    "# print(len(p), len(plot_dealts1))\n",
    "sns.lineplot(p, plot_dealts1)\n",
    "plt.title(\"Expected number of deaths based on probability\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 65480.87834098  72825.96609189  80888.32762795  89727.85972607\n",
      "  99408.63489156 109999.13631817 121572.50298703 134206.7852122\n",
      " 147985.21094603 162996.46316328 179334.96864809 197101.19851397\n",
      " 216401.98079211 237350.82542953 260068.26204355]\n"
     ]
    }
   ],
   "source": [
    "fit3 = ExponentialSmoothing(plot_dealts1).fit()\n",
    "fit2_mul = ExponentialSmoothing(plot_dealts1, seasonal_periods=None, trend='mul', seasonal=None).fit(use_boxcox=True)\n",
    "fit2_add = ExponentialSmoothing(plot_dealts1, seasonal_periods=None, trend='add', seasonal=None).fit(use_boxcox=True)\n",
    "# assuming it will take 15 days to reach peak\n",
    "forecasts=(fit2_add.forecast(15))\n",
    "print(forecasts)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[65480.87834098174,\n",
       " 72825.96609189303,\n",
       " 80888.32762795028,\n",
       " 89727.85972607022,\n",
       " 99408.63489155876,\n",
       " 109999.13631817054,\n",
       " 121572.50298703452,\n",
       " 134206.78521219746,\n",
       " 147985.21094603036,\n",
       " 162996.463163279,\n",
       " 179334.96864809404,\n",
       " 197101.1985139657,\n",
       " 216401.98079211355,\n",
       " 237350.82542952965,\n",
       " 260068.26204355463]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls_forecats= list(forecasts)\n",
    "ls_forecats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_forecasted_death(n):\n",
    "    \n",
    "    plot_dealts1= list(plot_dealts[1:len(plot_dealts)])\n",
    "    \n",
    "    forecasts=(fit2_add.forecast(n))\n",
    "    all_deaths= plot_dealts1\n",
    "    for i in range(len(forecasts)):\n",
    "        all_deaths.append(int(forecasts[i]))\n",
    "        \n",
    "    #plotting day wise all deaths\n",
    "    l= np.arange(0,len(all_deaths))\n",
    "    sns.lineplot(l, all_deaths)\n",
    "    print('total deats expected', int(forecasts[len(forecasts)-1]))\n",
    "    return(int(forecasts[len(forecasts)-1])*2, all_deaths)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total deats expected 99408\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Expected number of deaths based on ETS')"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tot_deaths, daily_deaths = plot_forecasted_death(5)\n",
    "plt.title(\"Expected number of deaths based on ETS\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "ls_d= list(daily_deaths)\n",
    "d=list()\n",
    "\n",
    "complete_list=ls_d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "198816\n",
      "288543\n",
      "369431\n",
      "442256\n",
      "507736\n",
      "566523\n",
      "619506\n",
      "666315\n",
      "708422\n",
      "746004\n",
      "779929\n",
      "810581\n",
      "837779\n",
      "861749\n",
      "882930\n",
      "901555\n",
      "918060\n",
      "932711\n",
      "945684\n",
      "956983\n",
      "966850\n",
      "975583\n",
      "983488\n",
      "990614\n",
      "997054\n",
      "1002873\n",
      "1008277\n",
      "1012997\n",
      "1017612\n",
      "1021874\n",
      "1025862\n",
      "1029664\n",
      "1033222\n",
      "1036682\n",
      "1040030\n",
      "1043284\n",
      "1046444\n",
      "1049529\n",
      "1052525\n",
      "1055466\n",
      "1058338\n",
      "1061152\n",
      "1063922\n",
      "1066630\n",
      "1069259\n",
      "1071728\n",
      "1074186\n",
      "1076437\n",
      "1078684\n",
      "1080806\n",
      "1082813\n",
      "1084681\n",
      "1086451\n",
      "1088117\n",
      "1089640\n",
      "1091011\n",
      "1092129\n",
      "1093242\n",
      "1094255\n",
      "1095161\n",
      "1095967\n",
      "1096686\n",
      "1097320\n",
      "1097884\n",
      "1098376\n",
      "1098802\n",
      "1099164\n",
      "1099423\n",
      "1099636\n",
      "1099807\n",
      "1099940\n",
      "1100071\n",
      "1100153\n",
      "1100209\n",
      "1100251\n",
      "1100277\n",
      "1100295\n",
      "1100312\n"
     ]
    }
   ],
   "source": [
    "def add_rev (x): \n",
    "\n",
    "    \n",
    "    newlist=x\n",
    "    length= len(x)\n",
    "    for i in range(length):\n",
    "        val= x[length-i-1]\n",
    "        val+= newlist[-1]\n",
    "        newlist.append(val)\n",
    "        print(val)\n",
    "    return(newlist)\n",
    "    \n",
    "list1=[1,2,3,4,5] \n",
    "all_list= (add_rev(ls_d))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fb06151b080>"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(np.arange(len(all_list)), all_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Taking GDP data yearly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "world_gdp_rate= gdp_rate.loc[gdp_rate['Country Name'] == 'World'] \n",
    "world_gdp_rate.drop(columns=['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code'], inplace=True) \n",
    "gdp= world_gdp_rate.T \n",
    "gdp.fillna(0)\n",
    "gdp_values= gdp.values\n",
    "gdp_years= gdp.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# subsetting pandemic data after 1960 \n",
    "# creating dic of deaths from pandemic table\n",
    "pandemic_data1= pandemic_data.iloc[13:]\n",
    "pandemic_data2=pandemic_data1.drop(columns=['Type / Pre-human host', 'Name'])\n",
    "dict_death= {'1968':300000, '1967':300000,'1970':300000, '2009':100000,'2010':100000, '2002':770,'2014':5500,'2015':5500, '2020':tot_deaths}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## pre processing GDP data\n",
    "\n",
    "gdp['deaths']=0\n",
    "gdp['year']=gdp.index\n",
    "gdp.rename(columns={257: 'GDP_growth'}, inplace=True) # rename column\n",
    "row=pd.DataFrame({'GDP_growth' :[0], 'deaths':[0], 'year':['2020']})\n",
    "gdp=gdp.append(row)\n",
    "gdp['deaths'] = gdp['year'].map(dict_death)\n",
    "gdp.fillna(0, inplace=True)\n",
    "gdp= gdp[gdp.year != 'Unnamed: 64']\n",
    "gdp.at['2019','GDP_growth']= 2.6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot deaths and GPD rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure()\n",
    "fig.set_figheight(10)\n",
    "fig.set_figwidth(30)\n",
    "t = gdp.year\n",
    "s1 =gdp.GDP_growth\n",
    "s2 = gdp.deaths\n",
    "\n",
    "ax1 = plt.subplot(211)\n",
    "plt.plot(t, s1)\n",
    "plt.title(\"GDP_growth\")\n",
    "plt.setp(ax1.get_xticklabels(), fontsize=10)\n",
    "\n",
    "ax2 = plt.subplot(212, sharex=ax1)\n",
    "plt.plot(t, s2)\n",
    "plt.title(\"Deaths\")\n",
    "# make these tick labels invisible\n",
    "plt.setp(ax2.get_xticklabels(), visible=True)\n",
    "\n",
    "# share x and y\n",
    "# plt.xlim(0.01, 10.0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Forecasting GDP using ARIMA(keeping deaths as external variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = sm.tsa.statespace.SARIMAX(gdp.GDP_growth, trend='c', order=(1,0,1),exog=gdp.deaths)\n",
    "\n",
    "model_fit = model.fit()\n",
    "\n",
    "# predicted = model_fit.forecast(step=1,exog=[[Y_exog_test]], dynamic=True)\n",
    "predicted = model_fit.forecast(step=1, exog=gdp.deaths[len(gdp)-1: len(gdp)] , dynamic=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting LSTM with external variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-processing LSTM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## adding share price data\n",
    "lstm_stock_data=gdp\n",
    "# stocks= pd.read_csv('yearly_stock.csv' )\n",
    "# stocks.rename(columns={'Unnamed: 0':'year'}, inplace=True)\n",
    "\n",
    "# stocks.columns\n",
    "# stocks['year']=stocks['Date'].astype(str)\n",
    "# stocks = stocks.drop(\"Date\", axis=1)\n",
    "# lstm_stock_data=pd.merge(lstm_data,stocks, on='year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# adding recession and number of countries affected by epidemic\n",
    "\n",
    "dict_recession= {'1970':1, '1974':1,'1975':1, '1980':1,'1981':1, '1982':1,'1983':1,'1990':1, '1991':1, '1992':1, '1993':1,'1998':1,\n",
    "            '2001':1, '2002':1, '2008':1, '2009':1}\n",
    "\n",
    "dict_noof_country= {'2003':31, '2004':31,'2009':178, '2010':178,'2014':10, '2015':10,'2016':37,'2017':27, '2020':177}\n",
    "\n",
    "lstm_stock_data['recession_flag']= lstm_stock_data['year'].map(dict_recession)\n",
    "lstm_stock_data['no_of_countries']= lstm_stock_data['year'].map(dict_noof_country)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lstm_stock_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "## creating lagged variable\n",
    "lstm_stock_data[\"gdp_lagged1\"]= lstm_stock_data[\"GDP_growth\"].shift(1)\n",
    "lstm_stock_data[\"gdp_lagged2\"]= lstm_stock_data[\"GDP_growth\"].shift(2)\n",
    "lstm_stock_data.fillna(0, inplace=True)\n",
    "lstm_stock_data[[\"deaths\", \"no_of_countries\"]] = keras.utils.normalize(lstm_stock_data[[\"deaths\", \"no_of_countries\"]], axis = 1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(lstm_stock_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating test ands train dataset\n",
    "test_df= lstm_stock_data.iloc[2:len(lstm_stock_data),]\n",
    "test_df_X= test_df[['deaths', 'recession_flag','no_of_countries','gdp_lagged1','gdp_lagged2']]\n",
    "test_df_y= test_df[['GDP_growth']]\n",
    "\n",
    "train_df= lstm_stock_data.iloc[0:len(lstm_stock_data)-2,]\n",
    "train_df_X= train_df[['deaths', 'recession_flag','no_of_countries','gdp_lagged2','gdp_lagged2']]\n",
    "train_df_Y=train_df[['GDP_growth']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "np_train_X= np.reshape(np.array(train_df_X),(59,1,5))\n",
    "np_train_Y=np.array(train_df_Y)\n",
    "\n",
    "np_test_X= np.array(test_df_X)\n",
    "np_test_X=np.reshape(np_test_X, (59,1,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building and fitting LSTM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "## building LSTM model on share price\n",
    "model = Sequential()\n",
    "model.add(LSTM(10, input_shape=(np_train_X.shape[1], np_train_X.shape[2])))\n",
    "model.add(Dense(1))\n",
    "model.compile(loss='mae', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# fitting the model\n",
    "history = model.fit(np_train_X, np_train_Y, epochs=10, batch_size = 3, \n",
    "                    validation_data=(np_train_X, np_train_Y), verbose=2, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 857,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting test and train \n",
    "pyplot.plot(history.history['loss'], label='train')\n",
    "pyplot.plot(history.history['val_loss'], label='test')\n",
    "pyplot.legend()\n",
    "pyplot.title('Model Performance')\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 858,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7a2ea5ec18>"
      ]
     },
     "execution_count": 858,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "yhat = model.predict(np_test_X)\n",
    "test_df_y[\"predicted\"] = yhat\n",
    "test_df_y.plot(title=\"Predicted Vs. Actual\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LSTM only on stock data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 859,
   "metadata": {},
   "outputs": [],
   "source": [
    "## adding share price data\n",
    "only_stock=stocks\n",
    "only_stock['lagged_price1']= only_stock['price'].shift(1)\n",
    "only_stock['lagged_price2']= only_stock['price'].shift(2)\n",
    "only_stock.fillna(0, inplace=True)\n",
    "test_df_1 = only_stock.iloc[2:len(only_stock),]\n",
    "test_df_X_1 = test_df_1[['lagged_price1','lagged_price2']]\n",
    "test_df_y_1 = test_df_1[['price']]\n",
    "\n",
    "train_df_1 = only_stock.iloc[0:len(only_stock)-2,]\n",
    "train_df_X_1= train_df_1[['lagged_price1','lagged_price2']]\n",
    "train_df_Y_1=train_df_1[['price']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 860,
   "metadata": {},
   "outputs": [],
   "source": [
    "np_train_X_1= np.reshape(np.array(train_df_X_1),(38,1,2) )\n",
    "np_train_Y_1= np.array(train_df_Y_1)\n",
    "np_test_X_1= np.array(test_df_X_1)\n",
    "np_test_X_1=np.reshape(np_test_X_1, (38,1,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 864,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 38 samples, validate on 38 samples\n",
      "Epoch 1/50\n",
      " - 2s - loss: 12.7621 - val_loss: 12.7320\n",
      "Epoch 2/50\n",
      " - 0s - loss: 12.7076 - val_loss: 12.6789\n",
      "Epoch 3/50\n",
      " - 0s - loss: 12.6543 - val_loss: 12.6253\n",
      "Epoch 4/50\n",
      " - 0s - loss: 12.5992 - val_loss: 12.5686\n",
      "Epoch 5/50\n",
      " - 0s - loss: 12.5391 - val_loss: 12.5048\n",
      "Epoch 6/50\n",
      " - 0s - loss: 12.4679 - val_loss: 12.4247\n",
      "Epoch 7/50\n",
      " - 0s - loss: 12.3733 - val_loss: 12.3166\n",
      "Epoch 8/50\n",
      " - 0s - loss: 12.2460 - val_loss: 12.1678\n",
      "Epoch 9/50\n",
      " - 0s - loss: 12.0709 - val_loss: 11.9984\n",
      "Epoch 10/50\n",
      " - 0s - loss: 11.9308 - val_loss: 11.8715\n",
      "Epoch 11/50\n",
      " - 0s - loss: 11.8060 - val_loss: 11.7431\n",
      "Epoch 12/50\n",
      " - 0s - loss: 11.6707 - val_loss: 11.6048\n",
      "Epoch 13/50\n",
      " - 0s - loss: 11.5335 - val_loss: 11.4671\n",
      "Epoch 14/50\n",
      " - 0s - loss: 11.3932 - val_loss: 11.3202\n",
      "Epoch 15/50\n",
      " - 0s - loss: 11.2438 - val_loss: 11.1685\n",
      "Epoch 16/50\n",
      " - 0s - loss: 11.0935 - val_loss: 11.0175\n",
      "Epoch 17/50\n",
      " - 0s - loss: 10.9463 - val_loss: 10.8815\n",
      "Epoch 18/50\n",
      " - 0s - loss: 10.8212 - val_loss: 10.7663\n",
      "Epoch 19/50\n",
      " - 0s - loss: 10.7147 - val_loss: 10.6653\n",
      "Epoch 20/50\n",
      " - 0s - loss: 10.6185 - val_loss: 10.5725\n",
      "Epoch 21/50\n",
      " - 0s - loss: 10.5298 - val_loss: 10.4889\n",
      "Epoch 22/50\n",
      " - 0s - loss: 10.4481 - val_loss: 10.4079\n",
      "Epoch 23/50\n",
      " - 0s - loss: 10.3685 - val_loss: 10.3330\n",
      "Epoch 24/50\n",
      " - 0s - loss: 10.2950 - val_loss: 10.2629\n",
      "Epoch 25/50\n",
      " - 0s - loss: 10.2237 - val_loss: 10.1911\n",
      "Epoch 26/50\n",
      " - 0s - loss: 10.1448 - val_loss: 10.1052\n",
      "Epoch 27/50\n",
      " - 0s - loss: 10.0433 - val_loss: 9.9872\n",
      "Epoch 28/50\n",
      " - 0s - loss: 9.9041 - val_loss: 9.8328\n",
      "Epoch 29/50\n",
      " - 0s - loss: 9.7313 - val_loss: 9.6443\n",
      "Epoch 30/50\n",
      " - 0s - loss: 9.5370 - val_loss: 9.4540\n",
      "Epoch 31/50\n",
      " - 0s - loss: 9.3773 - val_loss: 9.3316\n",
      "Epoch 32/50\n",
      " - 0s - loss: 9.2781 - val_loss: 9.2429\n",
      "Epoch 33/50\n",
      " - 0s - loss: 9.1973 - val_loss: 9.1657\n",
      "Epoch 34/50\n",
      " - 0s - loss: 9.1235 - val_loss: 9.0936\n",
      "Epoch 35/50\n",
      " - 0s - loss: 9.0531 - val_loss: 9.0239\n",
      "Epoch 36/50\n",
      " - 0s - loss: 8.9836 - val_loss: 8.9538\n",
      "Epoch 37/50\n",
      " - 0s - loss: 8.9111 - val_loss: 8.8781\n",
      "Epoch 38/50\n",
      " - 0s - loss: 8.8317 - val_loss: 8.7970\n",
      "Epoch 39/50\n",
      " - 0s - loss: 8.7465 - val_loss: 8.7082\n",
      "Epoch 40/50\n",
      " - 0s - loss: 8.6548 - val_loss: 8.6129\n",
      "Epoch 41/50\n",
      " - 0s - loss: 8.5606 - val_loss: 8.5213\n",
      "Epoch 42/50\n",
      " - 0s - loss: 8.4763 - val_loss: 8.4430\n",
      "Epoch 43/50\n",
      " - 0s - loss: 8.4047 - val_loss: 8.3773\n",
      "Epoch 44/50\n",
      " - 0s - loss: 8.3417 - val_loss: 8.3149\n",
      "Epoch 45/50\n",
      " - 0s - loss: 8.2808 - val_loss: 8.2546\n",
      "Epoch 46/50\n",
      " - 0s - loss: 8.2211 - val_loss: 8.1958\n",
      "Epoch 47/50\n",
      " - 0s - loss: 8.1629 - val_loss: 8.1389\n",
      "Epoch 48/50\n",
      " - 0s - loss: 8.1093 - val_loss: 8.0877\n",
      "Epoch 49/50\n",
      " - 0s - loss: 8.0596 - val_loss: 8.0383\n",
      "Epoch 50/50\n",
      " - 0s - loss: 8.0097 - val_loss: 7.9895\n"
     ]
    }
   ],
   "source": [
    "model_1 = Sequential()\n",
    "model_1.add(LSTM(10, input_shape=(np_train_X_1.shape[1], np_train_X_1.shape[2])))\n",
    "model_1.add(Dense(1))\n",
    "model_1.compile(loss='mae', optimizer='adam')\n",
    "history_1 = model_1.fit(np_train_X_1, np_train_Y_1, epochs=50, batch_size = 3, validation_data=(np_train_X_1, np_train_Y_1), verbose=2, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 865,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pyplot.plot(history_1.history['loss'], label='train')\n",
    "pyplot.plot(history_1.history['val_loss'], label='test')\n",
    "pyplot.legend()\n",
    "pyplot.title('Model Performance')\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 866,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7a311b6da0>"
      ]
     },
     "execution_count": 866,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_1\n",
    "yhat_1 = model_1.predict(np_test_X_1)\n",
    "test_df_y_1[\"predicted\"] = yhat_1\n",
    "test_df_y_1.plot(title=\"Predicted Vs. Actual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
